* 1回目 (10/04) の講義実施内容

- 学科のサイト :: http://wiki.cis.iwate-u.ac.jp/~suzuki/prog2016 
	 講義中の変更を反映する予定です。
- publicサイト ::
      http://masayuki054.github.io/prog
- リポジトリ :: http://github.com/masayuki054/prog/ 
- ワーキングコピー :: file:~suzuki/prog.git/

- [[./supplement.org][説明]]::ガイダンス
- 講師 [[http://wiki.cis.iwate-u.ac.jp/~suzuki/][自己紹介]]

- モジュラープログラミングについて軽く紹介

#+BEGIN_SRC org :tangle ../../supplement/modular-programming.org

*** Todo モジュラープログラミングについて
    SCHEDULED: <2016-11-08 火>

**** Acroquest プログラミング講座

     [[http://www.acroquest.co.jp/webworkshop/programing_course/index1.html][目から鱗が落ちるように分かるプログラミング講座 プログラミングとは？]]

     [[http://www.acroquest.co.jp/webworkshop/programing_course/index18.html][目から鱗が落ちるように分かるプログラミング講座 モジュール化の概念]]


**** 構造化プログラミングについて

[[http://www2.cc.niigata-u.ac.jp/~takeuchi/tbasic/Intro2Basic/Structure.html][構造化プログラミング]] がいい。

「大規模なプログラムを書くとき，どうしたら良いプログラムに仕上げること
ができるか？」という問いに対して与えられた回答。


**** Strategic Choice の役に立ちそうなコンテンツ

オブジェクト指向についてのサイトですが，モジュール化について考えるとき
の拠り所について参考にしてください:

- [[http://d.hatena.ne.jp/asakichy/20090216/1234765854][構造化プログラミング入門 - Strategic Choice]]

- [[http://d.hatena.ne.jp/asakichy/20090217/1234830611][段階的詳細化 - Strategic Choice]]

- [[http://d.hatena.ne.jp/asakichy/20090218/1234990542][凝集度 - Strategic Choice]]

- [[http://d.hatena.ne.jp/asakichy/20090219/1234936956][結合度 - Strategic Choice]]


#+END_SRC

*** Todo テストによる開発の説明 
    SCHEDULED: <2016-10-25 火>

TDD (Test Driven Development) テスト駆動開発といいます。

- [[https://ja.wikipedia.org/wiki/%E3%83%86%E3%82%B9%E3%83%88%E9%A7%86%E5%8B%95%E9%96%8B%E7%99%BA][テスト駆動開発 - Wikipedia]]
  
- [[./org-docs/what-is-tdd.org][資料/テストによる開発とは]] (この中にもリンクがあります)


*** Todo (ソフトウェア) テストについての説明
    SCHEDULED: <2016-10-25 火>

    [[./org-docs/software-test.org][資料/ソフトウェア・テスト]]

    [[https://ja.wikipedia.org/wiki/%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E3%83%86%E3%82%B9%E3%83%88][ソフトウェアテスト - Wikipedia]] 難い


*** Todo プログラミング関連の講義と演習

    [[http://wiki.cis.iwate-u.ac.jp/~suzuki/lects/prog/org-docs/cis-programming-lects/][プログラム関連演習@cis.iwate-u.ac.jp]] 振り返りましょう.

    下記のことが重要です。今は分らなくても，講義の終りには，理解できる
    ようになる(といいですね)。

    - [ ] 重要なプログラムの構成要素 [0/3]
      - [ ] 関数と抽象化，情報隠蔽
      - [ ] ヘッダファイルの役割，インタフェース遵守
      - [ ] 名前と実体の管理

    - [ ] コンパイル過程のこと [0/6]
      - [ ] #include の意味
      - [ ] gcc がおこなうこと
      - [ ] .o (オブジェクト・ファイル)
      - [ ] .a (静的ライブラリ), .so(動的ライブラリ)
      - [ ] ld (ローダ，リンケージ・エディタ)
      - [ ] a.out (実行プログラム)

*** Doing Emacs for progs (検討中)

    emacs@progs でどんな内容を教えるか？

**** 何に使うか [2/4]
     - [X] file handling
       - [X] find-file
       - [X] dired
     - [ ] programming
       - [ ] source coding
       - [ ] Makefile, make
     - [X] Document 作成 
       - [X] org-mode
     - [ ] terminal/shell execution
     - [ ] 全文検索
       - [ ] recnetf
       - [ ] ag
     - [?] 文芸的プログラミング
       - org-mode + babel 

   
**** Someday わかりやすサイトを見つけた
     CLOSED: [2016-10-09 日 13:15]

参考にしてください。

- [[http://d.hatena.ne.jp/Kazuhira/20120408/1333883641][Diredの基本操作を覚える - CLOVER]]

- [[http://d.hatena.ne.jp/Kazuhira/20120408/1333885399][Emacsのバッファ・ウィンドウ操作の基本を覚える - CLOVER]]

- [[http://d.hatena.ne.jp/Kazuhira/20120408/1333890311][Emacsで矩形編集を行う - CLOVER]]

- [[http://d.hatena.ne.jp/Kazuhira/20120408/1333891517][Emacsでのファイルの再読み込み・文字コード指定関連のTips - CLOVER]]


** Doing はじまり

*** Done ~/progs の作成 [2/2]
    CLOSED: [2016-10-09 日 13:15]
    
 - [X] 講義用のディレクトリを作成します：
   
 #+BEGIN_SRC sh :dir ~/ :results output output
# [~/]
cd ~/
mkdir -p progs
cd progs
mkdir -p lects cutter card_display game
ls -R
 #+END_SRC

 - [X] ~/progs/README.org を作成します:

 #+BEGIN_SRC org :tangle ~/progs/README.org
#+title: ~/progs/README.org
*ディレクトリの使用目的:
 - ./documents: 毎回の講義のめもを置きましょう
 - ./card_display: カード表示問題の開発用
 - ./cutter: テスト用
 - ./game: ポーカーゲーム開発用
 #+END_SRC

**** emacs 

- [[info:Emacs]], info:org-mode を教え,
- org-mode のことを少し説明する，かな
  - 見出しの書き方 ::
       行頭に*
  - 箇条書き :: 
       行頭に-, あるいは段落の始まりに-
  - 折りたたみ/展開 :: 
       タブ，またはシフト+タブ

**** 先生のprogs/
     - file:~suzuki/progs がお手本です。

*** 課題: card_display問題を始める

[[./org-docs/card-display.org][カード表示問題の始まり]]の card_display_simple 問題を読んで，
card_display_simple の解プログラムと開発ドキュメントを下記のように作成
してください。

- [ ] 自分なりにプログラムを作ってみる (来週まで)
- [ ] 機能分解して，テストによる開発してみる (来週)
- [ ] ~/progs/card_display/first/ を提出 (10/25)

    - ~/progs/card_display/first/simple.org ::
      - ソース・プログラムを作成する前にどんなふうに何を作るかを，
	できれば org-mode で書いてください。
      - プログラムの作成中に考えた事，決めた事，疑問など，箇条書きで書
        いてください。

    - ~/progs/card_display/first/simple.c ::
      1. できれば関数を多用してください。
      2. できれば分りやく書いてください。
      3. 正しく動くプログラムをsimple.c を作成してください。
      4. 正しく動くプログラムをsimple.0.c にし，
         1と2の2つの観点から書き直してみてください。
         改良し, 正しく動く simple.c にしてください。
      5. 納得できるまで上記の改良を繰り返し，繰り返しごとに番号を
         0->1->2-> ... と増やしてください。

    - ~/progs/card_display/first/Makefile ::
      simple.c をコンパイルするための規則を書いてください。

*** テストとテストによる開発とは 

何回かかけて，回下記の3つの資料を使って，テストによる開発を経験します。

- [ ] [[./org-docs/software-test.org][ソフトウェア・テストについて]]

- [ ] [[./org-docs/what-is-tdd.org][テストによる開発とは]]
   
- [ ] [[./org-docs/cutter.org][cutterの使い方]] テストの体験

*** card_display問題のテストによる開発 [0/7] 

    この内容は，次々回からになると思います。

    [[./org-docs/tdd-card-display-simple.org][CardDisplaySimple問題のテストによる開発]] [ ]
     - [ ] test_card_suit_new_from_string
     - [ ] test_card_no_new_from_string
     - [ ] test_card_new, suit, no
     - [ ] test_card_no_to_string
     - [ ] test_card_suit_to_string
     - [ ] test_card_to_string
     - [ ] card_display_single

