* 講義のまとめ
** Doing 既習の内容を思いだす
   SCHEDULED: <2015-10-06 火>

    [[http://wiki.cis.iwate-u.ac.jp/~suzuki/lects/prog/org-docs/cis-programming-lects/][プログラム関連演習@cis]] (([[file+emacs:~suzuki/lects/prog/org-docs/cis-programming-lects/][cis-org]] [[file+emacs:~/COMM/Lects/prog/site/org-docs/cis-programming-lects][s-org]])) 
    下記のことが重要です:

    - [-] 重要なプログラムの構成要素 [3/4]

      - [X] 構造体，型定義

       	=> [[抽象化]]と[[情報隠蔽]] のために使います。

      - [X] 関数

       	=> [[抽象化]]と[[情報隠蔽]] のために使います。

      - [X] ヘッダファイルの役割

       	=> インタフェースの提供と遵守のために使います。

      - [ ] 名前と実体の管理

       	=> 情報公開と隠蔽のために使います。

    - [X] コンパイル過程のこと [7/7]
      - [X] include
      - [X] gcc
      - [X] .o ([[オブジェクト・ファイル]])

       	=> 関数や変数，定数の入れ物です。

      - [X] .a ([[静的ライブラリ]]), .so([[動的ライブラリ]])

       	=> 関数や変数，定数の入れ物です。

      - [X] ld ([[ローダ]]，[[リンケージ・エディタ]])

       	=> オブジェクトファイルやライブラリを集めて，実行プログラムを作
       	成するコマンドです。

      - [X] a.out (実行プログラム)

      - [X] make

** Done テスト体験
   CLOSED: [2015-10-29 木 03:11] SCHEDULED: <2015-10-06 火>

    [[http://wiki.cis.iwate-u.ac.jp/~suzuki/lects/prog/org-docs/cutter][cutterの使い方]] (([[file+emacs:~suzuki/lects/prog/site/org-docs/cutter][@cis.org]] [[fle+emacs:~/COMM/Lects/prog/site/org-docs/cutter][@s.org]]))

    前回の資料には，説明不足がありました。すみません。不足していたのは，
    作業ディレクトリの指定，ファイル名，シェルコマンドを実行すること，
    などです。中身を理解し，類推・対応できるようになってほしいです。

**** 前回
     - テストする機能は，C言語文字列ライブラリの ~strcmp~ です。
     - テストを書いてみました。
     - テストをビルドするためのMakefileを作成しました。
     - cutter を使ってみました。
       
**** Done 今回もう一度
     CLOSED: [2015-10-29 木 03:11]

     流れは理解したと思うので，今度は意味を考えながら，もう一度同じこと
     をやりましょう。

     要望があったので，今回は suzuki が実際に作りながら説明します。

     テストとは何であるか，何がいいか，考えてみてください。
     
** Done テストと関数と開発について理解する
   CLOSED: [2015-10-29 木 03:36] SCHEDULED: <2015-10-27 火>
  
    [[http://wiki.cis.iwate-u.ac.jp/~suzuki/lects/prog/org-docs/what-is-tdd/][テストによる開発とは]]
    (([[file+emacs:~suzuki/lects/prog/site/org-docs/what-is-tdd/][@cis.org]]
    [[file+emacs:~/COMM/Lects/prog/site/org-docs/what-is-tdd/][@s.org]]))

    本日，一通り説明しました。

    [[関数の意味]]の補足説明を書きましたが，説明できませんでした。またいつ
    か。


** Doing トランプカードの表示問題 はじまり
    SCHEDULED: <2015-10-27 火>

   テストによる開発を学ぶため，二つのドキュメントを用意しました。

   - [[http://wiki.cis.iwate-u.ac.jp/~suzuki/lects/prog/org-docs/card-display/][カード表示問題の始まり]] (([[file+emacs:~suzuki/lects/prog/org-docs/card-display/][@cis.org]] [[file+emacs:~/COMM/Lects/prog/site/org-docs/card-display/][@s.org]])) を読み始めました。

   - [[http://wiki.cis.iwate-u.ac.jp/~suzuki/lects/prog/org-docs/tdd-card-display-simple/][カード表示問題_simpleのテストによる開発]] (([[file+emacs:~suzuki/lects/prog/org-docs/tdd-card-display-simple/][@cis.org]] [[file+emacs:~/COMM/Lects/prog/site/org-docs/tdd-card-display-simple/][@s.org]]))

   概要を説明しました。


* 終わった内容
** Done はじめに 
   CLOSED: [2015-10-13 Tue 18:39]

   - サイトの構成と内容を大きく変更しました。まだ書き換え中のものもあり
     ます。おかしなところや改善点を教えて下さい。

*** 提案 [2/2]

   - [X] 各列最後尾に，TAさんの席を作りたいと思います。協力お願いします。
   - [X] 各自の ~/progs/lects/の下，02.orgとかに講義のメモを作成しませ
     んか？ 

** Done 前回の講義のまとめ
   CLOSED: [2015-10-13 Tue 18:40]
   - [[http://wiki.cis.iwate-u.ac.jp/~suzuki/lects/prog/lects/01/index.html][講義.01のまとめ]] (([[file+emacs:~suzuki/lects/prog/site/lects/01/index.org][@cis.org]] [[file+emacs:~/COMM/Lects/prog/site/lects/01/index.org][@s.org]]))

** Done 講義紹介続き
   CLOSED: [2015-10-13 Tue 18:40]

   サイトをリニューアルしたので，もう一度説明:
   - 講義サイト renewal
     [[http://wiki.cis.iwate-u.ac.jp/~suzuki/lects/prog/][ソフトウェア構成論]] (([[~suzuki/lects/prog/site/index.org][cis-org]] [[~/COMM/Lects/prog/site/index.org][s-org]])) 

** Done ~/progs/ のはじまりの確認
   CLOSED: [2015-10-13 Tue 18:40]

*** ~/progs 講義用のディレクトリの確認

#+BEGIN_SRC sh :results output example :exports results
# ~/progsの表示スクリプトの実行
~/COMM/bin/lstree ~/progs
#+END_SRC

こんなふうにディレクトリを作ります:
#+begin_example 
~/progs
+-README.org
+-card_display
+-cutter
+-game-+-card
|      +-deck
|      +-hand
|      +-poker
+-lects
#+end_example

*** ~/progs/README.org の確認

    README.org ([[emacs org-mode][補足]]) に，ディレクトリの説明を書きます。


#+BEGIN_SRC org :tangle ~/progs/lects/Org.org
,** マークアップ文書の書き方を覚えましょう。(1)
- 見出し (行頭に * を書く)
- 箇条書き (行頭に * を書く)
#+END_SRC

# #+include: ~/progs/lects/Org.org

~/progs/README.org を次の様な内容で書きます:
#+BEGIN_SRC org :tangle ~/progs/README.org
,#+title: ~/progs/README.org
,* ~/progs ソフトウェア構成論開発用ディレクトリ
,** ディレクトリの構成と使用目的:
- ./lects: 毎回の講義のめもを置きましょう
- ./card_display: カード表示問題の開発用
- ./cutter: テスト用
- ./game: ポーカーゲーム開発用
  - ./game/card: カードモジュール
  - ./game/deck: 山モジュール
  - ./game/hand: 手札モジュール
  - ./game/poker: ポーカーモジュール
#+END_SRC



   
* 補足.03

  ここは，その日の講義に必要な補足的な説明や情報を置くところです。
講義中にも書くかもしれませんし，以前の講義のためのものも残っています。
書き溜めていけたらと思います。

** 説明
*** 抽象化
    - 複雑な操作をまとめ，名前をつけること。
    - 関数，構造体，型定義などを使う。

    - 参考 :: [[http://wiki.cis.iwate-u.ac.jp/~suzuki/lects/commons/abstraction.html][抽象化とは]]
    (([[file+emacs:~suzuki/lects/commons/abstraction.org][@cis.org]]
    [[file+emacs:~/COMM/Lects/commons/site/abstraction.org][@s.org]]))

    wikipedia等で調べてください。

*** 情報隠蔽
    - (モジュール)内部の情報を外部から守ること。
      - 内部と外部の間に壁を作り，外部から直接内部にアクセスできなくす
        る。
      - 決められた手段を通して，内部の情報を公開する。

    wikipedia等で調べてください。

*** 関数の意味
    SCHEDULED: <2015-10-13 火>

**** 関数と抽象化

     一連の処理に名前を付る。処理への入力を定め，変数とする。一連の処
     理が作りだす値を定める。

     一連の処理は，名前で呼び出せ，値を渡すと，処理した結果が返ってく
     る。

**** 関数の内と外の間の壁

     ソースプログラムを書いている時，
     大域変数は，すべての関数から見えるが，
     関数内で定義した変数は，他の関数から見えない。

**** 動作
     - 関数を呼び出した時，どんなことが起こるのか
       - 実引数*値*を引数をスタックに積み，
       - 戻るための情報をスタックに積み，
       - 関数ヘジャンプする
       	 - 関数からもどってくる
       - 戻り値がスタックに積まれている

     - 関数が呼び出され時，どんなことが起こるのか
       - 仮引数に値が入れらて飛んでくる
       - 計算する
       - 戻り値をスタックに入れて，スタックにある戻るための情報
       	 にしたがって，ジャンプする

*** シンプルであること (by George Whitesides)

     - 予測可能
     - 扱いやすい
     - 構成要素として機能すること


** 講義への補足

*** 昔のガイダンス

**** 動機付け

***** プログラムがかけるようになりたい

     - プログラムが思うようにかけるようになりたい
     - プログラムが正確にかけるようになりたい
     - プログラムが素早くかけるようになりたい
     - きれいなプログラムがかけるようになりたい
     - 簡潔なプログラムが書けるようになりたい

***** 面白いプログラムがかきたい

      - 思っていることをプログラムできる力が欲しい

***** 正しいプログラムを書きたい

      - プログラムの正しさがわかる力が欲しい
      - プログラムをデバッグする力が欲しい

***** 大規模なプログラム開発ができるようになりたい

      - わかりやすいプログラム
      - 協同作業しやすいプログラム


**** プログラム開発の肝

***** プログラムの構成要素とその働きを理解すること

      - 定数と変数
      - 式
      - 変数と代入による状態変化
      - 文と時間進行
      - 条件分岐と繰り返し

***** データの表現ができること

      - 値（定数）と型
      - 構造体と型定義による値と型の拡張
      - 変数と配列

***** 関数の働きを理解すること

      - 関数によるまとめ（抽象)
       	- 関数の宣言
       	- 関数の利用
       	- 関数の提供

***** 名前の見せ方・隠し方を理解すること

      - 変数とスコープ
      - 関数とスコープ
      - 関数とリンク

***** コンパイル，リンク，実行

***** デバッグ


*** 今日のemacs

**** コマンド

     - info:buffer
       : C-x b
       : C-x C-b
       : C-x 2
       : C-x 3
       : C-x 1
       : C-x 0
       : C-x o

     - info:file
       : C-x C-f
       : C-x 4 f
       : M-x find-file-read-only
       : C-x 4 r
       : C-x C-r
       : C-x C-s
       : C-x C-w  
       
     - info:frame
       : C-x 5
       : C-x 5 0
       : C-x 5 o


**** 話題
     - elscreen バッファのタブ化
     - org-mode

*** 今日のorg
    -info:org#DocumentStructure
     - 見出し
     - 箇条書き
     - 文芸的プログラミング
*** 講義内容へのpath
    - [ ] file:~suzuki/lects/prog の下に，講義資料があります。
    - [ ] file:~suzuki/progs が先生の開発ディレクトリで，お手本のつも
      りです。


** 技術的なこと

*** モジュール関連技術
**** モジュールとは部品
***** モジュール
      部品の入れ物
       	- 部品を実現する仕組み
       	- 部品を提供する仕組み
***** 部品，
       	- ある機能の実体

***** インタフェース
      - 部品の利用に関する決まり
       	* 利用環境での決まり
       	* 機能ごとの決まり

***** 部品の利用
       	- その実装をしらずに，
       	- インターフェイスの呼び出しのみを通して，
       	- 自分のプログラムから利用できる

***** 部品の提供
       	- インターフェイスを守り
       	- ある独立した機能を実現し，
       	- 他の人に機能を提供する
      
***** Ubuntu/C言語を使ったモジュールプログラミング

     * 利用側
       * あるライブラリの機能（関数）を見つけ，
       * man やヘッダファイルを見て，APIを知る
       * ヘッダファイルをインクルードし，
	 インターフェイスを守っていることを，
	 コンパイラに検査してもらう
       * 自分のプログラムに，ライブラリの関数をリンクする
       * プログラムをプロセスとして実行する
   
     * 提供側
       * ヘッダファイルを作成し
       * ヘッダファイルをインクルードし，
       * 機能を関数として実装し，
       * ヘッダファイルのAPIを遵守する
       * オブジェクトファイルあるいはライブラリとして提供する
　　



*** C-programming

*** emacs org-mode

    ファイルに .org 拡張子をつけることで，emacs で開くと，org-mode に
    なります。org-mode は文書を構造的に扱えます。強力です。

    org-mode links
    - http://orgmode.org/ja
    - [[https://github.com/org-mode-doc-ja/org-ja/blob/master/README.org][org-ja/README.org at master · org-mode-doc-ja/org-ja]]
    - [[http://d.hatena.ne.jp/tamura70/20100203/org][Emacs org-modeを使ってみる: (1) インストール - 屯遁のパズルとプログラミングの日記]]
    - info [[info:emacs#org][info:emacs#org]] 

*** emacs   
    - emacs の使い方は，~suzuki/progs/lects/Emacs.org, org-mode の使い
      方は, ~suzuki/progs/lects/Org.org に書いていこうと思っています。

    - emacs links
      - [[http://emacs-jp.github.io/beginner.html][Emacs for Beginners - Emacs JP]]  - info:emacs Emacs info
      - [[http://www.bookshelf.jp/texi/emacs-man/21-3/jp/emacs.html#SEC_Top][GNU Emacsマニュアル:(古いが日本語)]]

*** emacs org-mode+babel

    emacs org-mode の中に，文芸的プログラミングでき機能があります。説
    明を書きながら，ソースコードも書け，実行でき，出力を文書に取り込めるも
    のです。

    Cやシェル・スクリプトがその mode で書け，コンパイルや実行を行えま
    す。例えば，下記のように:

#+BEGIN_SRC org
,#+BEGIN_SRC c :tangle ./src/exmaple.c
int main(void) {}
,#+END_SRC

,#+BEGIN_SRC sh :dir ./src
cc example.c
,#+END_SRC
#+END_SRC



** 文書の書き方，見え方などへの補足説明

*** ページ内容の折り畳みと展開

    ページ右上に [Collapse all] [Expand all] があるページは，見出し単
    位で折り畳みと展開が可能です。

*** title((cis.org s.org))

    「title((cis.org s.org)) 」という表示は，三つのリンクから成ってい
    ます。titleは, httpリンクです。cis.orgは講義環境で emacs org-mode
    で開くときに使うファイル・リンクです。s.org は鈴木の個人環境用のファ
    イル・リンクです。



* Todo self checks [6/11]
   SCHEDULED: <2015-10-13 火>

   - [X] ゆっくり目に話すこと
   - [X] 用語に注意すること
   - [X] cutter/cutter.org を書きながら説明してみよう
   - [X] http://wiki.cis.iwate-u.ac.jp/~suzuki/lects/prog/lects/03 と
     file:~suzuki/progs/lects/03.org を切り替えながら
   - [X] 確認の時間を取る


   - [ ]  ~/progs/lects/03.org にメモを取りながら
   - [ ] 03/plan.org を~/progs/lects/03.orgにコピーしてこれに書き込んで，まとめにしよう

   - [ ] info:emacs info:org とかの確認
   - [ ] 学生さんに自身で検索してもらう

   - [X] ibus-skk への切り替え
   - [ ] msg 動かないか？
