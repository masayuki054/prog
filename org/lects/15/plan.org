* 講義終了後のお知らせ


** <2016-02-18 木> 3回目の未提出扱いのレポートについて

h26j071, h26j027, h26j088, h26j106, h26j128 の hand_dev.org 未提出

- h26j071
  - ファイルは存在するが，中身は0

- h26j072
  - hand-dev.org だった。評価しました。

- h26j088
  - hand_dec.org だった。評価しました。

- h26j106
  - hamd_dev.org だった。評価しました。

- h26j128
  - hand-dev.org だった。評価しました。



** <2016-02-18 木> 1,2,3 回目のレポートの再提出について

1回目の再提出者

: @login_1_5 = [
:   'h26j006', 'h26j033', 'h26j039', 'h26j068'
: ]


2回目の再提出者
: @login_2_3 = [
:    'h26j006', 'h26j087', 'h26j093', 'h26j121'
: ]

3回目の再提出者
: @login_3_2 = [
:   'h26j006', 'h26j025', 'h26j033', 'h26j039', 'h26j041',
:   'h26j061', 'h26j064', 'h26j068', 'h26j071', 'h26j072',
:   'h26j076', 'h26j084', 'h26j087', 'h26j092', 'h26j093',
:   'h26j100', 'h26j103', 'h26j119', 'h26j121', 'h26j126'
: ]


  
* お知らせ

** 状況確認

   講義時間中に，一人づつ，出席状況，開発状況，レポート成績を確認しま
   す。

** 最終レポートのお知らせ (2/9から変更あり)

   2/19 〆切 

   提出するもの
   - ~/progs/game で以下のことができること
     - (cd ~/progs/game; make clean) 
       - card, deck, hand, lib, include の中を clean する
     - (cd ~/progs/game; make build) 
       - 必要なヘッダファイル，ライブラリをインストールし，
       - poker/poker をつくる
     この3種類の make の結果を ~/progs/game/Make.out という名前のファ
     イルに保存しておいてください。やり方は下記です:

     #+BEGIN_SRC sh
script Make.out # Make.outへの記録開始

cd ~/progs/game
make clean ; make build
poker/poker  # ゲームの実行
# ゲームをおこなう
# ゲームを終わる

exit      
     #+END_SRC

     以上で，script ~ exit までの入出力が，Make.out に記録されています。
     二度やるときは，Make.out を一旦消してから，再度やってください。
     
   - poker モジュールの開発についてのレポート
     - card,deck,handの開発と何が違がうか
  
     ~/progs/reports/4/poker_dev.org
     
   - 講義のまとめ
     - 何を学び，行ない，何を得たか
     - 意見・感想

     ~/progs/reports/4/progs.org
   
** hand_dev.org，card・deck・hand モジュールを集めました。

確認用ファイル   
- ~suzuki/progs/collected_srcs/3/自分のログイン名/ 
- ~suzuki/progs/collected_reports/3/自分のログイン名/hand_dev.org
- ~suzuki/progs/reports/3/report-3.org

評価は， ~suzuki/progs/reports/3/reports-3.org を Emacs で見てください。

*** 内容


   - hand モジュールのテスト駆動開発についてまとめてください。

   - 意見・感想を添えて下さい。

   - ~/progs/reports/3/hand_dev.org に提出してください。

   - 締め切りは，2/8 とします。

** 着席端末について

   端末室では，先週と同じ席に座わって下さい。
   先々週集めた，進行状況の確認のためです。
   先週・先々週欠席した人は申し出てください。

** 第1回目レポートについて 再回収者の評価をしました。

~suzuki/progs/reports/1/reports-1-4.org を Emacs で見てください。

** 第2回目レポート 再回収者の評価をしました。

下記の人，再回収し，評価しました。
   
#+BEGIN_SRC ruby
@logins = ["h26j031"，"h26j041", "h26j083", "h26j090", "h26j093", "h26j110"]
#+END_SRC

~suzuki/progs/reports/2/reports-2-2.org を見てください。

**** 課題

    - ~/progs/game

    - deckモジュールの機能について，各機能のインタフェースを決め，決めた理由・
      過程を, 箇条書きで，まとめてください。

    - 講義への意見・要望・感想，その他講義に関することなんでも。

**** 提出物と場所
    
    - ~/progs/game
    - ~/progs/reports/2/deck_spec.org 

**** 提出期限




    - 01/12 (火) 15:00
      
** 第3回目レポート 再提出希望者

#+BEGIN_SRC ruby
@login = [
  'h26j068'， 'h26j077', 'h26j080', 'h26j088', 'h26j092', 
  'h26j093'
]
#+END_SRC

** 第2回目レポート 再提出希望者

#+BEGIN_SRC ruby
@login = [
  'h26j121'
]
#+END_SRC

* 今後の進行について [8/9]

- [X] 07 <2015-12-08 火> card_display_sort
- [X] 08 <2015-12-15 火> card_to_stringの解説，poker_game.start deck
- [X] 09 <2015-12-22 火> deck, cardモジュールの利用
- [X] 10 <2016-01-12 火> deck，
- [X] 11 <2016-01-19 火> hand モジュールの機能と設計，game/doc/hand-dev.org の作成
- [X] 12 <2016-01-26 火> hand 機能のテスト駆動開発，game/doc/hand-dev.org の作成
- [X] 13 <2016-02-02 火> hand 機能のテスト駆動開発，
  game/doc/hand-dev.org の作成，poker モジュールも考え始める
- [X] 14 <2016-02-09 火> poker
- [ ] 15 <2016-02-16 火> poker

  card, deck, hand, poker を完成させてください。

* 今日の講義について

poker モジュールの開発をおこなってください。

その後の開発については，各自にお任せします。レスポンスカードの提出で出
席にします。講義終了時間前でも，退出してかまいません。

来週の補講までに，できるだけ自分で開発を進めてください。

* Todo ポーカーゲームの開発 
  SCHEDULED: <2015-12-15 火> 

** Done Hand モジュールの開発 
   CLOSED: [2016-02-16 火 09:43] SCHEDULED: <2016-01-19 火>

   開発 [/]
   - [X] モジュールの機能 
   - [X] 機能のテスト駆動開発 [5/5]
     - [X] 手札と生成
     - [X] カードの出し入れ
     - [X] ソート
     - [X] 文字列化
     - [X] 役と判定

   game/doc/hand-dev.org の作成も併せて行なってください。

** Todo Poker (モジュール)の開発 
   SCHEDULED: <2016-01-26 火>

   game/poker/ を作りましょう。

* Doing 既習の内容を思いだす
  SCHEDULED: <2015-10-06 火>

** 2015.11.09 
*** C言語
**** 構造体 
**** 型定義 typedef 
**** 列挙型 enum

*** make
    
**** Makefile のルールの書き方

**** コンパイルの過程


** [[http://wiki.cis.iwate-u.ac.jp/~suzuki/lects/prog/org-docs/cis-programming-lects/][プログラム関連演習@cis]] (([[file+emacs:~suzuki/lects/prog/org-docs/cis-programming-lects/][cis-org]] [[file+emacs:~/COMM/Lects/prog/site/org-docs/cis-programming-lects][s-org]])) 
   下記のことが重要です:

   - [-] 重要なプログラムの構成要素 [3/4]

     - [X] 構造体，型定義

       => [[抽象化]]と[[情報隠蔽]] のために使います。

     - [X] 関数

       => [[抽象化]]と[[情報隠蔽]] のために使います。

     - [X] ヘッダファイルの役割

       => インタフェースの提供と遵守のために使います。

     - [ ] 名前と実体の管理

       => 情報公開と隠蔽のために使います。

   - [X] コンパイル過程のこと [7/7]
     - [X] include
     - [X] gcc
     - [X] .o ([[オブジェクト・ファイル]])

       => 関数や変数，定数の入れ物です。

     - [X] .a ([[静的ライブラリ]]), .so([[動的ライブラリ]])

       => 関数や変数，定数の入れ物です。

     - [X] ld ([[ローダ]]，[[リンケージ・エディタ]])

       => オブジェクトファイルやライブラリを集めて，実行プログラムを作
       成するコマンドです。

     - [X] a.out (実行プログラム)

     - [X] make


* 終わった内容
** Done はじめに 
   CLOSED: [2015-10-13 Tue 18:39]

   - サイトの構成と内容を大きく変更しました。まだ書き換え中のものもあり
     ます。おかしなところや改善点を教えて下さい。

*** 提案 [2/2]

   - [X] 各列最後尾に，TAさんの席を作りたいと思います。協力お願いします。
   - [X] 各自の ~/progs/lects/の下，02.orgとかに講義のメモを作成しませ
     んか？ 

** Done 前回の講義のまとめ
   CLOSED: [2015-10-13 Tue 18:40]
   - [[http://wiki.cis.iwate-u.ac.jp/~suzuki/lects/prog/lects/01/index.html][講義.01のまとめ]] (([[file+emacs:~suzuki/lects/prog/site/lects/01/index.org][@cis.org]] [[file+emacs:~/COMM/Lects/prog/site/lects/01/index.org][@s.org]]))

** Done 講義紹介続き
   CLOSED: [2015-10-13 Tue 18:40]

   サイトをリニューアルしたので，もう一度説明:
   - 講義サイト renewal
     [[http://wiki.cis.iwate-u.ac.jp/~suzuki/lects/prog/][ソフトウェア構成論]] (([[~suzuki/lects/prog/site/index.org][cis-org]] [[~/COMM/Lects/prog/site/index.org][s-org]])) 

** Done ~/progs/ のはじまりの確認
   CLOSED: [2015-10-13 Tue 18:40]

*** ~/progs 講義用のディレクトリの確認

#+BEGIN_SRC sh :results output example :exports results
# ~/progsの表示スクリプトの実行
~/COMM/bin/lstree ~/progs
#+END_SRC

こんなふうにディレクトリを作ります:
#+begin_example 
~/progs
+-README.org
+-card_display
+-cutter
+-game-+-card
|      +-deck
|      +-hand
|      +-poker
+-lects
#+end_example

*** ~/progs/README.org の確認

    README.org ([[emacs org-mode][補足]]) に，ディレクトリの説明を書きます。


#+BEGIN_SRC org :tangle ~/progs/lects/Org.org
,** マークアップ文書の書き方を覚えましょう。(1)
- 見出し (行頭に * を書く)
- 箇条書き (行頭に * を書く)
#+END_SRC

# #+include: ~/progs/lects/Org.org

~/progs/README.org を次の様な内容で書きます:
#+BEGIN_SRC org :tangle ~/progs/README.org
,#+title: ~/progs/README.org
,* ~/progs ソフトウェア構成論開発用ディレクトリ
,** ディレクトリの構成と使用目的:
- ./lects: 毎回の講義のめもを置きましょう
- ./card_display: カード表示問題の開発用
- ./cutter: テスト用
- ./game: ポーカーゲーム開発用
  - ./game/card: カードモジュール
  - ./game/deck: 山モジュール
  - ./game/hand: 手札モジュール
  - ./game/poker: ポーカーモジュール
#+END_SRC


** Done テスト体験
   CLOSED: [2015-10-29 木 03:11] SCHEDULED: <2015-10-06 火>

    [[http://wiki.cis.iwate-u.ac.jp/~suzuki/lects/prog/org-docs/cutter][cutterの使い方]] (([[file+emacs:~suzuki/lects/prog/site/org-docs/cutter][@cis.org]] [[fle+emacs:~/COMM/Lects/prog/site/org-docs/cutter][@s.org]]))

    前回の資料には，説明不足がありました。すみません。不足していたのは，
    作業ディレクトリの指定，ファイル名，シェルコマンドを実行すること，
    などです。中身を理解し，類推・対応できるようになってほしいです。

**** 前回
     - テストする機能は，C言語文字列ライブラリの ~strcmp~ です。
     - テストを書いてみました。
     - テストをビルドするためのMakefileを作成しました。
     - cutter を使ってみました。
       
**** Done 今回もう一度
     CLOSED: [2015-10-29 木 03:11]

     流れは理解したと思うので，今度は意味を考えながら，もう一度同じこと
     をやりましょう。

     要望があったので，今回は suzuki が実際に作りながら説明します。

     テストとは何であるか，何がいいか，考えてみてください。
     
** Done テストと関数と開発について理解する
   CLOSED: [2015-10-29 木 03:36] SCHEDULED: <2015-10-27 火>
  
    [[http://wiki.cis.iwate-u.ac.jp/~suzuki/lects/prog/org-docs/what-is-tdd/][テストによる開発とは]]
    (([[file+emacs:~suzuki/lects/prog/site/org-docs/what-is-tdd/][@cis.org]]
    [[file+emacs:~/COMM/Lects/prog/site/org-docs/what-is-tdd/][@s.org]]))

    本日，一通り説明しました。

    [[関数の意味]]の補足説明を書きましたが，説明できませんでした。またいつ
    か。

** Done トランプカードの表示問題 simple のテストによる開発
   CLOSED: [2015-12-05 土 16:27] SCHEDULED: <2015-10-27 火>

   [[http://wiki.cis.iwate-u.ac.jp/~suzuki/lects/prog/org-docs/card-display/][カード表示問題の始まり]] (([[file+emacs:~suzuki/lects/prog/org-docs/card-display/][@cis.org]] [[file+emacs:~/COMM/Lects/prog/site/org-docs/card-display/][@s.org]]))

   - 概要は説明しました。<2015-10-27 火>
   - 設計について説明しています。<2015-11-10 火>~
   - カード表示問題の開発をあわせて行いながら，理解しましょう。<2015-11-10 火>~

*** [[http://wiki.cis.iwate-u.ac.jp/~suzuki/lects/prog/org-docs/tdd-card-display-simple/][カード表示問題_simpleのテストによる開発]] (([[file+emacs:~suzuki/lects/prog/org-docs/tdd-card-display-simple/][@cis.org]] [[file+emacs:~/COMM/Lects/prog/site/org-docs/tdd-card-display-simple/][@s.org]])) [5/5]
    - [X] テストによる開発を始めました。<2015-11-10 火>
    - [X] 機能 card_suit_new_from_string のテストが通りました。<2015-11-10 火>
    - [X] 機能 card_no_new_from_string のテストを通したいです。<2015-11-17 火>
    - [X] 機能 card_new のテストを通しましょう。<2015-12-01 火>
    - [X] 機能 card_to_string のテストは，各自で設計・実装・
          テストのサイクルを考えながらおこなってください。

      常に，機能の利用，テスト，要求，実装，提供を意識してください。そ
      のために，どのディレクトリのどのファイルを修正するのか，考えなが
      ら行ってください。

** Done one トランプカードの表示問題 simple のテストによる開発
  CLOSED: [2015-12-21 月 16:21] SCHEDULED: <2015-10-27 火>

  - card_to_string のテストによる開発について，解説します。

** Done トランプカードの表示問題 sort のテストによる開発
  CLOSED: [2015-12-21 月 16:21] SCHEDULED: <2015-12-08 火>

  - cards_sort のテストが，クラッシュした原因について説明します。

    
** Done [[http://wiki.cis.iwate-u.ac.jp/~suzuki/lects/prog/org-docs/tdd-card-display-simple/][カード表示問題_simpleのテストによる開発]] (([[file+emacs:~suzuki/lects/prog/org-docs/tdd-card-display-simple/][@cis.org]] [[file+emacs:~/COMM/Lects/prog/site/org-docs/tdd-card-display-simple/][@s.org]])) [5/5]
   CLOSED: [2016-01-11 月 19:45]


** gameプロジェクトの開発

*** 先週の Makefile の説明
   - [X] diffの使い方，出力の見方 [2/2]
     - [X] card_display/simple/{test,src} の Makefile
     - [X] cardモジュールのMakefileとの差分

   - [X] game開発における決まり [2/2]
     - [X] cardモジュールのMakefile

   - [X] deck モジュールの Makefile [2/2]
     - [X] モジュールの利用のための追加規則
     - [X] cardモジュールの利用

*** 今週のMakefileの説明

    - http://wiki.cis.iwate-u.ac.jp/~suzuki/lects/prog/lects/supplyments/#sec-2

** deckモジュールの機能の開発 [6/6]

   - [X] deck_new, deck_size を確認しましょう。

   自分の設計にしたがって，deck の機能をテスト駆動開発してください。

   - [X] deck_draw をテスト駆動開発してください。
   - [X] deck_discard をテスト駆動開発してください。
   - [X] deck_renew をテスト駆動開発してください。
   - [X] deck_shuffle をテスト駆動開発してください。
   - [X] deck_print

     - 自分で設計してみましょう
     - 開発サイクルに慣れましょう


* Todo self checks [6/11]
   SCHEDULED: <2015-10-13 火>

   - [X] ゆっくり目に話すこと
   - [X] 用語に注意すること
   - [X] cutter/cutter.org を書きながら説明してみよう
   - [X] http://wiki.cis.iwate-u.ac.jp/~suzuki/lects/prog/lects/03 と
     file:~suzuki/progs/lects/03.org を切り替えながら
   - [X] 確認の時間を取る

   - [ ]  ~/progs/lects/03.org にメモを取りながら
   - [ ] 03/plan.org を~/progs/lects/03.orgにコピーしてこれに書き込んで，まとめにしよう

   - [ ] info:emacs info:org とかの確認
   - [ ] 学生さんに自身で検索してもらう

   - [X] ibus-skk への切り替え
   - [ ] msg 動かないか？
