* 山について考える

** 山の機能
 
   [[http://wiki.cis.iwate-u.ac.jp/~wiki/prog.cgi?山モジュールの機能の検討][山モジュールの機能の検討]] (prog-wiki) も参考にしてください。

*** ゲームの説明から山に関する部分を取り出す
   
     - *山*を作り直し，
       - カードをシャッフルし、
       - カードを積み上げる

     - 手札(5枚のカード) を配り，
       - *山*の一番上のカードを引く

     - 2回までの手札の交換後，
       - *山*の一番上のカードを引く
       - （手札の）カードを捨てる
         - *ステ山*に積む

     - 手札役の強い順にプレーヤ名を表示する 

*** 山モジュールの機能

    モジュールはトランプの山(という概念／機能) を提供する． 

    それは以下：
    - 山はカードの集まり．
      - カードを一列に積み上げる．
    - 山からカードを一枚引く.
      - 山が空になったら，捨て札の山から，山を作り直す．
    - (新しいトランプの組から)山を作り直す．
      -  山を作り直すとき，シャッフルする．
    - 捨て札を捨てる．つまり、捨て山に積む。

* テスト駆動開発の一サイクルのテンプレート
  
  モジュールの機能をテストします。

  まず，機能の名前を決めます。

** 機能の設計

*** インタフェースの設計
**** インタフェースを考える

     機能が操作の場合
     - 機能は箱，箱への入力と，箱からの出力を考える
     - 入力と出力が何であるか決める

     機能が物の場合
     - 機能は箱，箱の中身を考える。
     - 何からできているかを決める

**** テスト test_... () を書く

**** test/test_deck.o を作る (test/Makefile)
     
** 機能の実装

*** deck_new，deck_size の実装

**** インタフェースの確定 (src/deck.h)

**** Deck を作る (src/deck.c)
     
**** deck_new と deck_size を作る (src/deck.c)

**** deck_new.o, deck_size.o を作る (src/Makefile)

**** libdeck.a を作る (src/Makefile)


** 機能テスト

*** テスト

**** テスト test_deck.so のビルド

**** テストの実行とデバッグ


* 山のテスト駆動開発

  山に名前をつけます。deck にします。

** 開発ディレクトリ

   ~/progs/game/deck/{./, src/, test/} が開発に必要なディレクトリです。

   Makefile を作っておきましょう。
   - card_display/simple/Makefile がそのまま使えるはずですよね。

** 開発リポジトリ

   [[http://wiki.cis.iwate-u.ac.jp/svn/prog/2015/progs/game/deck][deck]]
   ソースコードの提示用に用意しました:

   - [[http://wiki.cis.iwate-u.ac.jp/svn/prog/2015/progs/game/deck/test][deck/test]]
     - [[http://wiki.cis.iwate-u.ac.jp/svn/prog/2015/progs/game/deck/test/Makefile][deck/test/Makefile]]
     - [[http://wiki.cis.iwate-u.ac.jp/svn/prog/2015/progs/game/deck/test/test_deck.c][deck/test/test_deck.c]]
   - [[http://wiki.cis.iwate-u.ac.jp/svn/prog/2015/progs/game/deck/src][deck/src]]
     - [[http://wiki.cis.iwate-u.ac.jp/svn/prog/2015/progs/game/deck/src/Makefiel][deck/src/Makefile]]
     - [[http://wiki.cis.iwate-u.ac.jp/svn/prog/2015/progs/game/deck/src/deck.h][deck/src/deck.h]]
     - [[http://wiki.cis.iwate-u.ac.jp/svn/prog/2015/progs/game/deck/src/deck.c][deck/src/deck.c]]

   コメントの形で，ソースコードブロックに名前がついています。その名前
   で参照します。#+name:test-deck#new とかです。

** card モジュールを利用するための決まり

    モジュール利用規則を決めておく
    - game/inlcude にヘッダファイルを置くことにする
    - game/lib にライブラリファイルを置くことにする

    card.h, libcard.a も使えるようにcard/src/Makefile を書き換えて，
    make install でgame/include に card.h を，game/lib に libcard.a
    を，コピーする規則を付け加える。

    - [[http://wiki.cis.iwate-u.ac.jp/~suzuki/lects/prog/lects/supplyments.html][講義補足]] (([[file+emacs:~suzuki/lects/prog/lects/supplyments.org][@cis.org]] [[file+emacs:~/COMM/Lects/prog/site/lects/supplyments.org][@s.org]])) のMakefileを参考にしてください。
    - [[http://wiki.cis.iwate-u.ac.jp/svn/prog/2015/progs/game/card/src/Makefiel][card/src/Makefile]] を参考にしてください。
    - card/src/Makefileが修正できたら，make install して，
      card.h, libcard.a がコピーできたことを確認してください。

** 山 (Deck) の機能の設計・実装・テスト

   山はこのモジュールの主体である *もの*。*もの* はデータ構造となり，
   型 (または実体(変数)) となります。

   *もの* は生まれ・作られ，状態を持つ。

   この状態をテストする。

   はじめは簡単なテストしか書けないが，
   他の機能ができてから，より詳しいテストができるようになる。
   
*** インタフェースの設計
**** インタフェースを考える

     頭の中や，紙と鉛筆や，Emacs org-mode を使って，考える。

     - 52枚のカードから山を作る:
       - 引き札の山に52枚のカードが積まれ，
       - 捨て札の山は0枚のカードが積まれている，状態を作る
       - 二つの山は，山モジュールの中に隠れていて，プレーヤに見えてなくてもいい
       - 引き札の山から一枚のカードが引かれ，
       - 捨て札の山に一枚のカードが捨てらればいい。

     ある程度見通しがたったら，test/test_deck.c に書き始める。

     : deck_new();

     - テストにするため，検査の式を書く:

     : deck_size(deck)==52

       - deck_size()は山のカードの枚数を返す関数。新たな機能の登場。

         良さそう

     - インタフェースを書く

       : void deck_new (void);
       : int deck_size (void);

       良さそう。

*** テスト test_deck_new() を書く

   [[http://wiki.cis.iwate-u.ac.jp/svn/prog/2015/progs/game/deck/test/test_deck.c][deck/test/test_deck.c]]  #+name:test-deck#new に当たるテスト関数です。
      
**** test/test_deck.o を作る

     test/test_deck.c から test/test_deck.o を作りたいです。

     test/Makefile が必要になります。
     game/card/test/Makefile を参考に，deck/test用の Makefile を書いてください。
     copy して，変更してもいい。
 
     [[http://wiki.cis.iwate-u.ac.jp/svn/prog/2015/progs/game/deck/test/Makefile][deck/test/Makefile]] のようになります。

*** deck_new，deck_size の実装

**** インタフェースの確定 (src/deck.h)

     deck/test/test_deck.c にあったインタフェースを
     deck/src/deck.h に移します。

     [[http://wiki.cis.iwate-u.ac.jp/svn/prog/2015/progs/game/deck/src/deck.h][deck/src/deck.h]] 中の下記部分になります。
     - #+name:deck.h#include
     - #+name:deck.h#new

**** Deck を作る (src/deck.c)
     山の型と実体を作ります。

    - 52枚のカードから山を作る:
      - 引き札の山に52枚のカードが積まれ，
      - 捨て札の山は0枚のカードが積まれている，状態を作る
      - 二つの山は，山モジュールの中に隠れていて，プレーヤに見えてなくてもいい

    なので，
    - 山は構造体 
      : struct _Deck {};
    - 52枚のカードが積まれ
      : # include <Card>
      : struct _Deck {Card cards[52];};
    - 0枚のカードが積まれている，状態
      : # include <Card>
      : struct _Deck {Card cards[52]; int size};

    - 引き札の山, 捨て札の山,
    - 二つの山は，山モジュールの中に隠れていて，プレーヤに見えてなく
      てもいい
      : # include <Card>
      : struct _Deck {Card cards[52]; int size};
      : typedef struct _Deck Deck;
      : static Deck using;
      : static Deck used;

    ということで， [[http://wiki.cis.iwate-u.ac.jp/svn/prog/2015/progs/game/deck/src/deck.c][deck/src/deck.c]] の
    - #+name:deck.c#include
    - #+name:deck.c#Deck 
    ができあがります。
     
**** Todo new と size を作る (src/deck.c)

     deck_new, deck_size を自分で実装してみましょう。

**** Todo deck.o を作る (src/deck.o)

***** Todo deck/src/Makefile の変更

      - ~/progs/game/include/card.h が使えるようにする

**** Todo libdeck.a を作る 

     ただ make すればよいでしょう。


*** Todo テスト

**** Todo テスト test_deck.so のビルド
     - ~/progs/game/lib/libcard.a が使えるようにする

**** Todo テストの実行とデバッグ

** Todo 山から引く機能の設計・実装・テスト

   山 (積み重ねられたカード) の一番上のカードを引く

**** インタフェースの設計

     Card c = deck_draw();
     
**** テスト

     deck_size()==51     

*** deck_draw をテストする:

    test_deck.c#deck_draw)

    : deck_new();
    : Card a = deck_draw();
    : cut_assert(deck_size(stock) == 51)
   
*** deck.h への追加変更
    src/deck.h
    : Card deck_draw(void);
   
*** deck.c への追加変更

#+name: deck.c#deck_draw()
#+BEGIN_SRC c :
Card 
deck_draw(void)
{
  return using.cards[--using.size];
}
#+END_SRC

*** deck.o の作成

*** libdeck.a の作成

*** test_deck.so の作成

*** test

** Todo カードを捨てる (test_deck.c#test_discard)

   書いてみる
   :   n = deck_discard(c);

   - カードを一枚捨てる
   - 捨てられたカードの枚数が帰ってくる
   - ちょっと不自然か？
   - 捨て山の枚数を取得する関数を用意したほうがいいかも

   deck.h
   : int deck_discard(Card);

   draw.c への変更追加
   - 捨て山
   : static Deck used;

   - 捨てる
   : int deck_discard(Card a)
   : {
   :    used.cards[used.size++]=a;
   :    return used.size;
   : }

** Todo 山の再構成 (deck_renew)

*** 機能

    引き山がなくなり，捨て山から引き山を作り直す。
   
    Deckモジュール内で利用する機能

    deck_renew

*** テストする

    53枚引いて捨てて，山の枚数を確かめる。

    : deck_new();
    : while(deck_size()>0) 
    :   deck_discard(deck_draw()); 
    : int n = deck_discar(deck_draw());
    : cut_assert(deck_size()==51)
    : cut_assert(n == 1)

*** renewの実装 (src/deck.c#renew)

    : using = used
    : used.size = 0

*** deck.o の作成

*** libdeck.a の作成

*** test_deck.so の作成

*** test
** Todo シャッフル
   - 0~stock.top-1 のカードを
     - 適当な回数
     - 適当な2枚を入れ替える

** 山を印刷
   test_print.cの作成
   : # include <deck.h>
   : Deck_newしてDeck_topが０になるまで，
   : while (Deck_top()>0)
   :   printf("%s\n", Card_to_str(Deck_draw());

   デバッグ用
   print.c の作成 
   : void Deck_print(Deck deck)
   : {
   :     for (i=0; i<deck.top; i++)
   :       printf("%s\n", Card_to_string(deck.cards[i]))
   : }

   インターフェイスへの変更はない．test_deck の一部と考えられる．



