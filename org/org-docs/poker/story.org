* はじまり
  SCHEDULED: <2015-12-07 月>

  Wikiサイト [[http://wiki.cis.iwate-u.ac.jp/~wiki/prog.cgi?%E8%AC%9B%E7%BE%A9%E5%86%85%E5%AE%B9][Prog Wikky - 講義内容]] の内容を，テストによる開発に会わせ
  て，新しくドキュメントを作り直しています。
  
** Done ポーカーゲーム作りの始まり 
   CLOSED: [2015-12-07 月 22:31]

   - あるゲームソフト会社で，無口な上司からの仕事依頼
   - 今のあなたなら、どんな情報があれば考えられますか? 作れますか?

*** カードモジュールつくってよ (@カードモジュールつくってよ)

口数少ない上司:
#+BEGIN_QUOTE
    「ポーカーゲームを作ることになったから，カードモジュール作ってよ．」
#+END_QUOTE

私:
#+BEGIN_QUOTE
    「＠_＠ 何を．．．どうやって．．．何が必要．．．」
#+END_QUOTE

口数少ない上司:
#+BEGIN_QUOTE
    「自分で考えてね．一を聞いて十を知るのがカリスマプログラマだよね．」
#+END_QUOTE

私:
#+BEGIN_QUOTE
    「＠_＠ ．．．．．．」
#+END_QUOTE


*** 講義で考えているポーカーゲーム 

    ここで想定しているポーカーとは以下を繰り返すことです：

    - 山を作り直し，

    - 5人のプレーヤに，

    - 手札(5枚のカード) を配り，

    - 2回までの手札の交換後，

    - 手札役の強い順にプレーヤ名を表示する．
      役については [[http://www6.airnet.ne.jp/spade/poker/rule/yaku.html][ポーカーの役についての説明]] を参考にします。

    ゲーム全体をプログラムするには，この説明から何をどうプログラムする
    のかを考えなくてはなりません．

    - この中に含まれる「もの」と「操作」が洗い出せますか？
      それらがプログラムする対象となります。

    - 「もの」や「操作」を表す言葉は抽象化されていて，その中には隠され
      た情報があることがわかりますか？


*** ゲーム説明とモジュールわけ 

   ゲーム説明を仕様と考えます。

   - 仕様中には主体や対象となる *もの*(名詞) が現れます。

     - ものの間には関係があり，依存関係で大きなものにまとめられるもの
       もあります。

   - 主体や対象は，機能を行なうものや機能により処理されるもの，です。

   - 仕様中に現れた *もの* 達を機能のまとめ役と考えます。

   この *もの* を一つのまとまり (モジュール) として，考えていくこと
   になります。

   モジュール分けの良さの基準は曖昧ですが，一応結合度と凝集度という基
   準があります。

   [[http://wiki.cis.iwate-u.ac.jp/~suzuki/lects/meta-ruby/lects/note/#outline-container-sec-2][メタプログラミング Ruby 講義ノート・メモ]] のモジューラプログラミング
   を参考にしてください。

*** ゲーム説明の分析 (課題)

    ゲーム説明を読んで次の事を行なってみてください:
    - ものを取り出してください。
    - 機能を取り出して下さい。
    - 機能をもので分類してください。
    - 機能の対象と結果が何かを分析してください。

    講義の進行上，先生の分析とモジュール分けをもとに，開発を体験しても
    らいますが，常に自分の分析と比較検討していって下さい。


*** モジュール分け

   ここでは下記のように分けて考えます

   - カード
     
   - 山

   - 手札
     - 役

   - プレーヤー
     - プレーヤー名

   - ゲームモジュール

** テストの意味


*** 「まずテストを書く」こと

   プログラム化することで問題が *現実化* され，プログラミング上の検討
   の対象となります。

   モジュール分け・機能分けの設計の良さ悪さを，テストを書くことで，具
   体的に評価したいのです。

*** フィードバック

   テストが 書けない/書きにくい なら，機能への分割が悪いかもしれません:

   - 機能が粗く考えられている

   - 機能への入力出力が明確でない

   などが考えられます。他の原因も考えられます。

   もっと前の段階の，機能をまとめるものが悪いことも考えられます。モジュー
   ル分けが適切ではなかったということになります。

   適切ではなかったと考えられる場合は，設計し直すことになります。






     









