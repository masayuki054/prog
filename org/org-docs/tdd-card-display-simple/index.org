open #+Time-stamp: <2016-11-28 22:41:39 m>
#+SETUPFILE: ~/COMM/public_html/org-html-theme/index-bigblow-header.setup
#+include: ~/COMM/Lects/prog/site/info/common-header.org

#+TITLE: CardDisplayのテスト駆動開発

#+name: Makefile
#+BEGIN_SRC Makefile :exports none
# ~/progs/card_display/simple/Makefile
.PHONY: clean card_test

card_test:
	(cd src; make)
	(cd test; make)	
	cutter -v v test/

clean:
	(cd src; make clean)
	(cd test; make clean)
	rm -f *.o *.so *~ \#* *.gch
#+END_SRC

#+name: src/Makefile
#+BEGIN_SRC Makefile :exports none 

# src/Makefile 
.PHONY: clean
CFLAGS = -g -c -fPIC -I. 
LDFLAGS = -lc

libcard.a: card.o
	rm -f $@
	ar r $@ $^

card.o: card.c card.h
	gcc $< $(CFLAGS)

clean: 
	rm -f *.o *.so *~ \#* *.gch
#+END_SRC

#+name: src/Makefile#cards
#+BEGIN_SRC Makefile :exports none 

# src/Makefile 
.PHONY: clean
CFLAGS = -g -c -fPIC -I. 
LDFLAGS = -lc

libcard.a: card.o cards.o
	rm -f $@
	ar r $@ $^

card.o: card.c card.h
	gcc $< $(CFLAGS)

# (2015.12.08) cards.o: cards.o card.h 
cards.o: cards.c card.h 
	gcc $< $(CFLAGS)

clean: 
	rm -f *.o *.so *~ \#* *.gch
#+END_SRC

#+name: test/Makefile
#+BEGIN_SRC Makefile :exports none
# test/Makefile
.PHONY: clean
CFLAGS = -fPIC -I../src `pkg-config cutter --cflags`
LDFLAGS = -L../src/ -lcard `pkg-config cutter --libs`

test_card.so: test_card.o
	gcc -o $@ --shared $^ $(LDFLAGS)

test_card.o: test_card.c
	gcc -c $< $(CFLAGS)

clean:
	rm -f *.o *.so *~ \#* *.gch
#+END_SRC

#+name: test/Makefile#test_sort
#+BEGIN_SRC Makefile :exports none
# test/Makefile
.PHONY: clean
CFLAGS = -fPIC -I../src `pkg-config cutter --cflags`
LDFLAGS = -L../src/ -lcard `pkg-config cutter --libs`

all: test_card.so test_sort.so

test_card.so: test_card.o 
	gcc -o $@ --shared $^ $(LDFLAGS)

test_card.o: test_card.c
	gcc -c $< $(CFLAGS)

test_sort.so: test_sort.o 
	gcc -o $@ --shared $^ $(LDFLAGS)

test_sort.o: test_sort.c
	gcc -c $< $(CFLAGS)

clean:
	rm -f *.o *.so *~ \#* *.gch
#+END_SRC
#+name: card.h#include
#+BEGIN_SRC c :exports none
// src/card.h
# include <string.h>
#+END_SRC

#+name: card.h#e_Suit
#+BEGIN_SRC c :exports none
enum e_Suit {CLUB=1,DIAMOND,HEART,SPADE};
enum e_Suit card_suit_new_from_string(char *);
#+END_SRC

#+name: card.h#e_No
#+BEGIN_SRC c :exports none
enum e_No { TWO=2, THREE, FOUR, FIVE,
	    SIX, SEVEN, EIGHT, NINE, TEN,
	    JACK, QUEEN, KING, ACE};
enum e_No card_no_new_from_string(char *);
#+END_SRC

#+name: card.h#card_struct 
#+BEGIN_SRC c :exports none
struct _Card {
  enum e_Suit suit;
  enum e_No no;
};
#+END_SRC

#+name: card.h#Card
#+BEGIN_SRC c :exports none
typedef struct _Card Card;

enum e_Suit card_suit(Card);
enum e_No card_no(Card);
Card card_new(enum e_Suit, enum e_No);
#+END_SRC

#+name: card.h#card_to_string
#+BEGIN_SRC c :exports none
char *card_to_string(Card);
#+END_SRC

#+name: card.h-suit_new
#+BEGIN_SRC c :exports none :noweb yes
<<card.h#include>>

<<card.h#e_Suit>>
#+END_SRC


#+name: card.h-no_new
#+BEGIN_SRC c :exports none :noweb yes
<<card.h#include>>

<<card.h#e_Suit>>

<<card.h#e_No>>

#+END_SRC

#+name: card.h-card_new
#+BEGIN_SRC c  :exports none :noweb yes
<<card.h#include>>

<<card.h#e_Suit>>

<<card.h#e_No>>

<<card.h#card_struct>>

<<card.h#Card>>
#+END_SRC

#+name: card.h-card_to_string
#+BEGIN_SRC c  :exports none :noweb yes
<<card.h#include>>

<<card.h#e_Suit>>

<<card.h#e_No>>

<<card.h#card_struct>>

<<card.h#Card>>

<<card.h#card_to_string>>
#+END_SRC

#+name:card.h#cards_sort
#+BEGIN_SRC C :exports none
Card *cards_sort(Card *, int);
#+END_SRC

#+name:card.h#card_compare
#+BEGIN_SRC C :exports none
int card_compare(Card, Card);
#+END_SRC

#+name: card.h-cards_sort
#+BEGIN_SRC c  :exports none :noweb yes
<<card.h#include>>

<<card.h#e_Suit>>

<<card.h#e_No>>

<<card.h#card_struct>>

<<card.h#Card>>

<<card.h#card_to_string>>

<<card.h#card_compare>>
<<card.h#cards_sort>>
#+END_SRC
#+name: test_card.c#include
#+BEGIN_SRC c :exports none
// test/test_card.c
# include <cutter.h>
# include <card.h>
#+END_SRC

#+name: test_card.c#suit_new
#+BEGIN_SRC c :exports none
void
test_card_suit_new_from_string(void)
{
  cut_set_message("文字列からスーツを作成する。");
  cut_assert_true(card_suit_new_from_string("SPADE")==SPADE);
  cut_assert_true(card_suit_new_from_string("HEART")==HEART);
  cut_assert_true(card_suit_new_from_string("DIAMOND")==DIAMOND);
  cut_assert_true(card_suit_new_from_string("CLUB")==CLUB);
}
#+END_SRC

#+name: test_card.c#no_new
#+BEGIN_SRC c :exports none
void
test_card_no_new_from_string(void)
{
  cut_set_message("番号から数値への変換のテスト");
  cut_assert(card_no_new_from_string("1")==ACE);
  cut_assert(card_no_new_from_string("13")==KING);
  cut_assert(card_no_new_from_string("12")==QUEEN);
  cut_assert(card_no_new_from_string("11")==JACK);
  cut_assert(card_no_new_from_string("10")==10);
}
#+END_SRC

#+name: test_card.c#card_new
#+BEGIN_SRC c :exports none
void
test_card_new(void)
{
   cut_set_message("スーツと番号からカードを作成");
  {
    Card sa = card_new(SPADE,ACE);
    cut_assert(card_suit(sa)==SPADE);
    cut_assert(card_no(sa)==ACE);
  }
}
#+END_SRC

#+name: test_card.c#card_to_string
#+BEGIN_SRC c :exports none

void
test_card_to_string(void)
{
  cut_set_message("カードを文字列にする");
  {
    Card sa = card_new(SPADE,ACE);

    cut_assert(strcmp(card_to_string(sa), "SA")==0);
  }
}

#+END_SRC
#+name: test_sort.c#include
#+BEGIN_SRC c :exports none
// test/test_sort.c
# include <cutter.h>
# include <card.h>
#+END_SRC
#+name: test_sort.c#test_setup
#+BEGIN_SRC C :exports none
  Card test_cards[5];
  {
    test_cards[0] = card_new(SPADE,ACE);
    test_cards[1] = card_new(HEART,ACE);
    test_cards[2] = card_new(CLUB,2);
    test_cards[3] = card_new(DIAMOND,10);
    test_cards[4] = card_new(SPADE,2);
  }
#+END_SRC

#+name: test_sort.c#expected_setup
#+BEGIN_SRC C :exports none
  Card expected_cards[5];
  {
    expected_cards[4] = card_new(SPADE,ACE);
    expected_cards[3] = card_new(HEART,ACE);
    expected_cards[2] = card_new(DIAMOND,10);
    expected_cards[1] = card_new(SPADE,2);
    expected_cards[0] = card_new(CLUB,2);
  }
#+END_SRC

#+name: test_sort.c
#+BEGIN_SRC c :exports none
void
test_cards_sort(void)
{
  <<test_sort.c#test_setup>>

  <<test_sort.c#expected_setup>>

  Card *cards, *sorted_cards;
  {
    cards = test_cards; // 2015.12.08 fixed
    sorted_cards = cards_sort(cards, 5);
  }

  int i;
  for (i=0; i<5; i++)
    {
      cut_assert(card_compare(expected_cards[i], sorted_cards[i])==0 );
    }
}

#+END_SRC
#+name: card.c#include
#+BEGIN_SRC c :exports none
// src/card.c
# include <stdio.h>
# include <string.h>
# include <stdlib.h>
# include <card.h>
#+END_SRC

#+name: card.c#suit_new
#+BEGIN_SRC c :exports none
enum e_Suit
card_suit_new_from_string(char *suit_str)
{
  if (strcmp("CLUB",suit_str)==0)
    return CLUB;
  if (strcmp("DIAMOND",suit_str)==0)
    return DIAMOND;
  if (strcmp("HEART",suit_str)==0)
    return HEART;
  if (strcmp("SPADE",suit_str)==0)
    return SPADE;
  return 0;
}
#+END_SRC

#+name: card.c#no_new
#+BEGIN_SRC c :exports none
enum e_No
card_no_new_from_string(char *no_str)
{
  int no = atoi(no_str);

  if (no==1)  no = ACE;

  if ( no < TWO && ACE < no )
    {
      fprintf(stderr, "不適な数値 (%s)!\n", no_str);
    };
  return (enum e_No)no;
}
#+END_SRC

#+name: card.c#card_new
#+BEGIN_SRC c :exports none
Card
card_new(enum e_Suit suit, enum e_No no)
{
  Card new;

  new.suit = suit;
  new.no = no;
  return new;
}
#+END_SRC

#+name: card.c#card_suit
#+BEGIN_SRC c :exports none
enum e_Suit
card_suit(Card c)
{
  return c.suit;
}
#+END_SRC

#+name: card.c#card_no
#+BEGIN_SRC c :exports none
enum e_No
card_no(Card c)
{
  return c.no;
}
#+END_SRC

#+name:card.c#card_to_string
#+BEGIN_SRC c :exports none

char card_suit_to_char(enum e_Suit);
char card_no_to_char(enum e_No);
char *
card_to_string(Card c)
{
  char suit = card_suit_to_char(card_suit(c));
  char no = card_no_to_char(card_no(c));
  char *s = (char *) malloc(3);

  s[0] = suit;
  s[1] = no;
  s[2] = '\0';

  return s;
}
#+END_SRC

#+name:card.c#card_suit_to_char
#+BEGIN_SRC c :exports none

static char SuitChars[] =
  {'*', 'C', 'D', 'H', 'S'};
char 
card_suit_to_char(enum e_Suit suit)
{
  return SuitChars[suit];
}
#+END_SRC

#+name:card.c#card_no_to_char
#+BEGIN_SRC c :exports none

static char NoChars[] =
  {'.', '*', '2', '3', '4', '5', '6', '7', '8', '9',
   '0', 'J', 'Q', 'K', 'A'};
char
card_no_to_char(enum e_No no)
{
  return NoChars[no];
}

#+END_SRC
#+name: cards.c#include
#+BEGIN_SRC c :exports none
// src/cards.c
# include <card.h>
#+END_SRC

#+name: cards.c#card_compare
#+BEGIN_SRC c :exports none
int
card_compare(Card a, Card b)
{
  if (card_no(a)>card_no(b))
    return 1;
  if (card_no(a)<card_no(b))
    return -1;
  if (card_suit(a)>card_suit(b))
    return 1;
  if (card_suit(a)<card_suit(b))
    return -1;
  return 0;
}
#+END_SRC

#+name: cards.c#cards_sort
#+BEGIN_SRC c :exports none
Card *                                                                                         
cards_sort(Card *cards, int no_of_cards)
{
  int i;
  Card *pos;

  for(pos=cards, i=0; i<no_of_cards; i++, pos++)
    {
      Card *cur;
      int j;

      for(j=i+1,cur=pos+1; j<no_of_cards; j++, cur++)
        {
//        if (card_compare(*pos,*cur)<=0)  2015.12.08 fixed
          if (card_compare(*pos,*cur)>=0)
            {
              Card temp = *pos;
              *pos = *cur;
              *cur = temp;
            }
	}
    }
  return cards;
}
#+END_SRC


#+include: contents.org

