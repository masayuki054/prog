# Time-stamp: <2016-11-15 10:33:54 m>
#+startup: overview
#+options: ^:{}

* はじめに

  テスト駆動開発の例として，card_display_simple問題を
  テスト駆動開発してましょう。

  その上で，わずかな変更を加えることで，card_display_multi 問題と，
  card_display_sort 問題を，テスト駆動開発してましょう。

  そして，その開発を通して，カードモジュールが出来上がることを実感して
  みましょう。

* ディレクトリ構成
#+include: 01-directory.org 

* Makefileを作る
#+include: 02-makefile.org

* 開発を機能に分ける

  さて次は，card_display_simpleを，機能に分け，機能をテストしな
  がら開発します。(file:card-display/)

  下記の機能に分けてみます:

  1. スーツを数値にする機能，
  2. トランプ番号を数値にする機能，
  3. トランプ・カード型を表す機能，
  4. スーツと番号からトランプカードを作成する機能
  5. トランプ・カードを文字列で表す機能。


  これらの機能を組み合わせてcard_display_simpleプログラムが開発できま
  す。

  実は，この機能分けが一番重要かもしれません。最初から全ての機能が取り
  出せなくてもいいと思います。必要そうな機能を一つづつためしてもいいで
  す。自分で丁度いいと思うことが大切です。

* 機能のテスト駆動開発 (概論)

  これらの機能をひとつづつ確かめながら開発を進めるのが，テスト駆動開
  発です。具体的な開発を進める前に，おおまかな流れを説明します。

  進め方は:

  - Makefileの作成 :: テストと実装をビルドし，テストを実行するための
		       Makefile を書く。

		       ./Makefile には src/, test/ でビルドするルールを書き，
		       cutter によりテストを実行する規則を書く。

  - test/Makefileの作成 :: テストをビルドするための規則を書く。

       test/Makefile に test_card.c から test_card.so を作成し，
       cutter によるテストの実行するための規則を書く。

  - 機能テストの作成 :: 機能が正しく働くことを確かめるテスト (プログラム) を書く。このこ
    とにより，*機能の使い方*を決める。

    test/test_card.c に上の5つの機能テストを作成していく。

  - テスト(のみ)のビルド :: ビルドし，コンパイル・エラーが取れ，確かめ
       る機能の関数のみが未定義の状態にする。

  - src/Makefile :: 機能の実装をビルドするための規則を書く。

		    src/Makefile に card.c, card.h から libcard.a を
		    作成する規則を書く。

  - インタフェースの決定 :: 確かめる機能の関数を使うために必要最小限
       のインタフェースを決める。

      test/test_card.c から取り出し，src/card.h に書く。

  - 機能の実装 :: インタフェースに従がい，機能を関数として実装する。

		src/card.c を作成する。

  - 機能の提供 :: 実装をビルドし，ライブラリとヘッダファイルで機能を提
                  供する。

		  src/Makefile にルールを書き，
		  src/libcard.aを作成する。

  - テストのビルドと実行 ::

  では，続く節で，5つの機能のテスト駆動開発をおこないます。

* スーツを数値にする機能のテストと実装 

#+include: suit_new.org 

* トランプ番号を数値に
#+include: no_new.org 

* トランプ・カードを作成
#+include: card_new.org

* トランプ・カードを文字列に

  自分でやってみましょう。

** 設計

   要求は，カードの内部表現を文字列にすること

    - 2文字からなるの文字列とする
    - スーツは 'S', 'H', 'D', 'C',  1文字
    - 数は 'A','K','Q','J','0','9','8','7','6','5','4','3','2'，1文字

    処理
    - スーツや番号を添字に配列を参照するのも一つの方法

*** 機能の名前と構造
    card_to_string カードを文字列にする機能
    - card_suit_to_string  スーツを1文字にする機能
    - card_no_to_string 番号を1文字にする機能
      
*** 関数の引数と戻り値の型 (APIの設計)
    - char *card_to_string(Card);
      - char *card_suit_to_string(int suit);
      - char *card_no_to_string(int no);

** テストによる開発
   card_no_new_from_string や card_new の開発をまねして，
   テストによる開発を行って下さい。

   =開発の過程をドキュメントとしてまとめ= =レポート提出してください= 。

* トランプ・カードを文字列に
#+include: card_to_string.org

* card_display_simple 問題の解の作成
  
  - ~/progs/card_display/simple/ =に，= 

  - 作成した src/libcard.a =を利用し，= 
    の中で提供した関数を利用し，

  - card_display_simple.c を作成し，

  - Makefile を書き換えて, card_display_simple をビルドできるように，
    してください。

* card_display_multi

  Card cards[5]; を使ってみる。

* card_display_sort 
#+include: cards_sort.org
