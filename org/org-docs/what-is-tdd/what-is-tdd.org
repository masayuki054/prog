# Time-stamp: <2016-09-24 05:12:54 m>

* テスト駆動開発について

** 入門サイト
   - [[http://www.slideshare.net/shuji_w6e/ss-15246933][テスト駆動開発入門]] (slideshare)

   - [[http://www.atmarkit.co.jp/ait/articles/1403/05/news035.html][超入門テスト駆動開発／振る舞い駆動開発を始めるための基礎知識 (1/3) - ＠IT]]

** やりたいこと

   少しづつ，以下のことを，繰り返すことで，開発を進めること：

   - まず，(テストを書くことで APIを）設計し，
   - 次に，(APIを守って) 機能を実装し，
   - そして，要求を満たしていることを確かめる，
   - 今回の変更が，他に影響を及ぼさないことを確かめる

* 基本は関数

  プログラム演習Iの関数の基本を思いだそう

- [[http://wiki.cis.iwate-u.ac.jp/%7Ecis/prog1/pukiwiki/index.php?%E7%AC%AC10%E5%9B%9E][第a回]] -- 6.1 関数の基本，6.2 引数と戻り値
- [[http://wiki.cis.iwate-u.ac.jp/%7Ecis/prog1/pukiwiki/index.php?%E7%AC%AC11%E5%9B%9E][第b回]] -- 6.3 変数の寿命とスコープ，6.4 再帰呼び出し

** 関数を呼び出すこと

: { int value = f(1.0, "abc"); ... }

** 関数を定めること
: int
: f(double x, char *name)
: { ... ; return 1; }

** 関数を呼び出すことと定めることの間にある決まりごと

: int f(double, char *name);


* ヘッダファイルとライブラリを利用すること

  三角関数を使う下記のプログラムを考えます:

#+BEGIN_SRC c :tangle babel/tdd/sin314.c
  # include <stdio.h>
  # include <stdlib.h>
  # include <math.h>
  int
  main()
  {
    double result = sin(3.14L);
    printf("sin(3.14)=%g\n", result);
    exit(0);
  }
#+END_SRC

   このソースプログラムをコンパイルし，実行形式プログラムを作成するに
   は，下記コマンドを実行します:

#+BEGIN_SRC sh :results output :dir babel/tdd
 %  cc -o sin314 sin314.c -lm
#+END_SRC

  実行は：

#+BEGIN_SRC sh :results output :dir babel/tdd
 % ./sin314
#+END_SRC

  sin関数を計算する機能を，プログラムから利用するために，上記のプログ
  ラムで行なわれていることをまとめると:

- 提供 :: /usr/lib/libm.so ライブラリ, % nm /usr/lib/libm.so 
- 利用 :: #include <math>, cc -lm
- 情報 :: % man 3 sin


** 機能を要求する

   数値計算プログラムから使う"三角関数の計算"機能, double sin(double);
   が要求する機能。

#+BEGIN_SRC sh
grep sin /usr/include/math.h
#+END_SRC

** 提供されている機能

   機能を提供しているのは，Linux の数値計算ライブラリ /usr/lib/libm.so。

#+BEGIN_SRC sh

file /usr/lib/libm.so
nm /usr/lib/libm.so | grep sin

#+END_SRC

#+RESULTS:

** 機能の説明

   ユーザはmanコマンドで使い方を知り，~#include <math.h>~ で sin 関数
   を使うためのインタフェースを取り込み，~cc ... -lm~ で数学ライブラリ
   を取り込む。

** 機能を使うきまり

    - 利用側のプログラムでは，利用インタフェースが記述されたヘッダファイ
      ルをインクルードし，インタフェースを遵守します。

    - 提供側のプログラムは，利用インタフェースが記述されたヘッダファイル
      を作成し，自らそれをインクルードすることで，自身もインタフェースを
      遵守します。

    - 提供側は，プログラムソースは見せずに，機能をライブラリに詰め込み，
      ライブラリとヘッダファイルを公開します。

    - 利用側は，自身のプログラムとライブラリをリンクすることで，自身の実
      行プログラムに機能を取り込むことができます。

    Linux システム上で，C言語を使ってプログラム開発をおこなう際の，決まり
    事です。

** 機能を利用する側と機能を提供する側とヘッダファイル

   main関数は，sin関数（機能）を使う側です。数学ライブラリを開発する
   側が，sin関数を提供する側で，math.hがsin関数を使う際の決まりごと（イン
   タフェース）を定めています。

   使う側は，ヘッダファイル math.h を include し，コンパイル時にエラー
   が起きないことで，そのインタフェースを守っていることが保証されるの
   です。


* プログラムの機能

** 機能とは

  この講義では，C言語の関数の *働き* を機能といいます。
  
  関数の働きとは，「関数に何を与えて，関数は何を計算してくれるか」です。

** 機能を要求する

   このデータを与えると，こんな計算をして，こんな結果を返してくれる関数
   を作ってくれませんか？
   
   - 度数版sin関数::
   : double型の，ラジアンではなく，度数で計算してくれる sin 関数で，結果はfloatでね。

   - トランプ・カードのスーツ計算 ::
   : トランプのスーツを与えると，スーツの強さを整数で返してくれる関数を，お願い。

   - カードに関する機能(群) -- モジュール
   : ポーカーゲームで使うカードの機能達の組。個々の機能は自由に設計してね。

** 機能を実現する

   はい，了解。こんな入力に対して，こんな風にを計算して，こんな結果を
   返す関数を作りました。

   こんな風につかってくださいね。

   : float deg_sin(double);

   : int suit_int(char *);

   : card.h に使い方が書いてあります。
   : card/ ディレクトリの下にソースがありますが，見なくても使えるはずです。

** 機能を提供する

   ヘッダファイルを作りましたので，インクルードして使ってください。本
   体は，オブジェクトファイルやライブラリで提供します。ソースを見る必
   要はないはずです。

   : degsin.h
   : libdeg.a

   : suit.h
   : suit_int.o をリンクしてください。

   : card.h に使い方が書いてあります。
   : libcard.a をリンクしてください。

** 機能を利用する

   ありがとう，では使わせてもらいます。

#+name: use_suit.c
#+BEGIN_SRC c :tangle babel/use_suit.c
  # include <stdlib.h>
  # include <stdio.h>
  
  # include <suit.h>
  
  main()
  {
    int s = suit_int("HEART");
    printf("HEART = %d\n", s);
    exit(0);
  }    
#+END_SRC

#+name: use_suit_cc.sh
#+BEGIN_SRC sh :tangle babel/use_suit_cc.sh
  INCLUDE_PATH = /path/to/header_file
  LIBRARY_PATH = /path/to/library
  cc -I $INCLUDE_PATH main.c -L $LIBRARY_PATH -lsuit
#+END_SRC

   うまく使えました。ありがとう。
   
** 機能の要求と実現と提供と利用

   欲しい機能が既に存在すれば，それを再開発せずに，使えることが望まれ
   ます。  欲しい機能が存在しなければ，その機能を実現し，上と同じ方法
   で提供・利用することも望まれます。

   機能に対する要求・実現・提供・利用が，別々に行えると融通性が高くな
   ります。


* 開発と機能とテスト

** 開発と機能

   機能の要求と実現を，一人で行う場合もありますし，
   他人からの要求に応えて，実現を引き受ける場合もあります。

   どちらの場合にも，機能を要求・利用する側と実現・提供する側に分けるこ
   とで，インタフェースを守ることにより，プログラムの開発を分割し独立し
   て行うことが出来ます。

   多人数で開発する場合は分担開発ができるということですし，一人で開発す
   る場合でも，より小さな開発へ分割できることになります。

   大きなプログラムを開発する場合を考えます。大きな機能の実現が求められ
   る場合，より小さな機能の組み合わせとなるよう考えます。実際，そうなっ
   ていることがほとんどです。また，プログラムがたくさんの機能を要求す
   る場合は，復数の機能がグループ化されたり，階層化されたりします。
   この場合もやはり，より小さな開発の組み合わせとなります。

** 開発とテスト

   小さな機能の組み合わせで大きな開発をおこなう場合，利用する各機能が
   正しく動くことが保証されていると，スムーズに開発できます。
   
   おかしなことが起こった場合でも，切り分けが可能になります。

   テストは，誰でも時間が経過し中身を忘れても，その保証を確認できます。
   



   
   

   

