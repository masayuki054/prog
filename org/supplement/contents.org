* ガイダンスのために

** 動機付け

*** プログラムがかけるようになりたい

   - プログラムが思うようにかけるようになりたい
   - プログラムが正確にかけるようになりたい
   - プログラムが素早くかけるようになりたい
   - きれいなプログラムがかけるようになりたい
   - 簡潔なプログラムが書けるようになりたい

*** 面白いプログラムがかきたい

    - 思っていることをプログラムできる力が欲しい

*** 正しいプログラムを書きたい

    - プログラムの正しさがわかる力が欲しい
    - プログラムをデバッグする力が欲しい

*** 大規模なプログラム開発ができるようになりたい

    - わかりやすいプログラム
    - 協同作業しやすいプログラム


** プログラム開発の肝

*** プログラムの構成要素とその働きを理解すること

    - 定数と変数
    - 式
    - 変数と代入による状態変化
    - 文と時間進行
    - 条件分岐と繰り返し

*** データの表現ができること

    - 値（定数）と型
    - 構造体と型定義による値と型の拡張
    - 変数と配列

*** 関数の働きを理解すること

    - 関数によるまとめ（抽象)
      - 関数の宣言
      - 関数の利用
      - 関数の提供

*** 名前の見せ方・隠し方を理解すること

    - 変数とスコープ
    - 関数とスコープ
    - 関数とリンク

*** コンパイル，リンク，実行

*** デバッグ


** 講義の眺望2015 @prog.org
    2015.10回目 今迄やってきた事，これからやる事の意味
   
*** 機能とテスト

    - プログラムを考える単位，関数

    - 正しさを考える単位，関数

*** 機能とモジュール

    - 機能の集まり

    - プログラム群を扱う

*** テスト駆動開発

    - 関数単位の開発

    - 反復的な開発

*** カード表示問題とテスト駆動開発

    - 問題の解法のための機能作り

*** ポーカーゲーム開発

**** Card

     - 機能の集まりとしての module
     
**** Deck

     - module 設計

     - 機能の設計

**** Hand

     - module 設計

     - 機能の設計

**** Player

**** Poker

     - 機能の組み合わせと利用

* 概念説明
*** 抽象化
    - 複雑な操作をまとめ，名前をつけること。
    - 関数，構造体，型定義などを使う。

    - 参考 :: [[http://wiki.cis.iwate-u.ac.jp/~suzuki/lects/commons/abstraction.html][抽象化とは]]
    (([[file+emacs:~suzuki/lects/commons/abstraction.org][@cis.org]]
    [[file+emacs:~/COMM/Lects/commons/site/abstraction.org][@s.org]]))

    wikipedia等で調べてください。

*** 情報隠蔽
    - (モジュール)内部の情報を外部から守ること。
      - 内部と外部の間に壁を作り，外部から直接内部にアクセスできなくす
        る。
      - 決められた手段を通して，内部の情報を公開する。

    wikipedia等で調べてください。

*** 関数の意味
    SCHEDULED: <2015-10-13 火>

**** 関数と抽象化

     一連の処理に名前を付る。処理への入力を定め，変数とする。一連の処
     理が作りだす値を定める。

     一連の処理は，名前で呼び出せ，値を渡すと，処理した結果が返ってく
     る。

**** 関数の内と外の間の壁

     ソースプログラムを書いている時，
     大域変数は，すべての関数から見えるが，
     関数内で定義した変数は，他の関数から見えない。

**** 動作
     - 関数を呼び出した時，どんなことが起こるのか
       - 実引数*値*を引数をスタックに積み，
       - 戻るための情報をスタックに積み，
       - 関数ヘジャンプする
       	 - 関数からもどってくる
       - 戻り値がスタックに積まれている

     - 関数が呼び出され時，どんなことが起こるのか
       - 仮引数に値が入れらて飛んでくる
       - 計算する
       - 戻り値をスタックに入れて，スタックにある戻るための情報
       	 にしたがって，ジャンプする

*** シンプルであること (by George Whitesides)

     - 予測可能
     - 扱いやすい
     - 構成要素として機能すること

* モジュールとは
** モジュールのイメージ
*** 関数
    - 関数として独立したもの
    - 関数とは何？
      - 名前で呼び出せること
      - 値を渡せること
      - 結果が返ってくること
    - 独立するとはどういうこと？

*** 機能
    - 大きな仕事の中から，
      独立したまとまりのいい部分的な機能を取り出したもの，
    - 使いまわしがきく
    - インターフェイスをとおして使う

** モジュールとは部品
*** 部品の利用
    - ある機能の実体
    - その実装をしらずに，
    - インターフェイスを守り，
    - 自分のプログラムから利用できる
*** 部品の提供     
    - ある独立した機能を実現し，
    - インターフェイスを守り
    - インターフェイスのみを通して，
    - 他の人に機能を提供する
     
** Ubuntu/C言語を使ったモジュールプログラミング

*** 利用側
    - あるライブラリの機能（関数）を見つけ，
    - man やヘッダファイルを見て，APIを知る
    - ヘッダファイルをインクルードし，
      インターフェイスを守っていることを，
      コンパイラに検査してもらう
    - 自分のプログラムに，ライブラリの関数をリンクする
    - プログラムをプロセスとして実行する
    
**** 提供側
     - ヘッダファイルを作成し
     - ヘッダファイルをインクルードし，
     - 機能を関数として実装し，
     - ヘッダファイルのAPIを遵守する
     - オブジェクトファイルあるいはライブラリとして提供する
　　

* 講義いままで，これから 講義への補足 2016-01-12

#+include: perspective.org :minlevel 3

* 開発の構造

#+include: card_display_simple.org :minlevel 3

#+include: deck_dev.org :minlevel 3

* deck/src/Makefile
#+include: makefile.org :minlevel 2

#+include: make-diff.org :minlevel 2

* handモジュール開発文書の作成 講義への補足 2016-01-19
#+include: hand_dev.org :minlevel 3

* gch問題

  - しらなかった事実

    - card.h をコンパイルすると，card.gch が作られる
      card.gch が存在すると，card.h は読まれず，card.gch 
      が使われる。
    
      [[https://gcc.gnu.org/onlinedocs/gcc/Precompiled-Headers.html][Precompiled Headers - Using the GNU Compiler Collection (GCC)]]

      - s-: は，文法チェックだけされると考えていた

    - ヘッダファイルをあらかじめコンパイルすると，Cソースのコンパイ
      ル時間が大幅に短くなる(ことがある)

      [[http://marupeke296.com/CPP_No14_PrecompiledHeader.html][その14 ドキドキしないプリコンパイル済みヘッダ]]

      - 今から考えると，もっともだと思うが，今迄は，チェック以外意味
        がないと考えていた。

	card.gch って，コンパイラ内部のデータ構造のメモリダンプだよ.

  - Makefile の小さなミス
      
    - gcc -c $^  => gcc -c card.h card.c となって，card.gch が *毎
      回* 作られていた。ので，問題は発生していなかった。

  - 小さなミスの修正が招く大きな混乱

    - card.ghc を消さずに，Makefile のミスを修正した。以後，card.h
      はコンパイル時に読まれず，いくら card.h を修正しても状況は変わ
      らなくなった。

  すみませんでした。

* emacs

** コマンド

   - info:buffer
     : C-x b
     : C-x C-b
     : C-x 2
     : C-x 3
     : C-x 1
     : C-x 0
     : C-x o

   - info:file
     : C-x C-f
     : C-x 4 f
     : M-x find-file-read-only
     : C-x 4 r
     : C-x C-r
     : C-x C-s
     : C-x C-w  
       
   - info:frame
     : C-x 5
     : C-x 5 0
     : C-x 5 o


** 話題
   - elscreen バッファのタブ化
   - org-mode


* emacs org-mode
  -info:org#DocumentStructure
   - 見出し
   - 箇条書き
   - 文芸的プログラミング

* 講義内容へのpath
  - [ ] ~suzuki/lects/prog/ の下に，講義資料があります。
  - [ ] ~suzuki/progs が先生の開発ディレクトリで，お手本のつもりです。

* モジュール関連技術
*** モジュールとは部品
**** モジュール
     部品の入れ物
       - 部品を実現する仕組み
       - 部品を提供する仕組み
**** 部品，
       - ある機能の実体

**** インタフェース
     - 部品の利用に関する決まり
       * 利用環境での決まり
       * 機能ごとの決まり

**** 部品の利用
       - その実装をしらずに，
       - インターフェイスの呼び出しのみを通して，
       - 自分のプログラムから利用できる

**** 部品の提供
       - インターフェイスを守り
       - ある独立した機能を実現し，
       - 他の人に機能を提供する
      
**** Ubuntu/C言語を使ったモジュールプログラミング

      * 利用側
	* あるライブラリの機能（関数）を見つけ，
	* man やヘッダファイルを見て，APIを知る
	* ヘッダファイルをインクルードし，
	  インターフェイスを守っていることを，
	  コンパイラに検査してもらう
	* 自分のプログラムに，ライブラリの関数をリンクする
	* プログラムをプロセスとして実行する
   
      * 提供側
	* ヘッダファイルを作成し
	* ヘッダファイルをインクルードし，
	* 機能を関数として実装し，
	* ヘッダファイルのAPIを遵守する
	* オブジェクトファイルあるいはライブラリとして提供する
 　　



* C-programming

* emacs org-mode

   ファイルに .org 拡張子をつけることで，emacs で開くと，org-mode に
   なります。org-mode は文書を構造的に扱えます。強力です。

   org-mode links
   - http://orgmode.org/ja
   - [[https://github.com/org-mode-doc-ja/org-ja/blob/master/README.org][org-ja/README.org at master · org-mode-doc-ja/org-ja]]
   - [[http://d.hatena.ne.jp/tamura70/20100203/org][Emacs org-modeを使ってみる: (1) インストール - 屯遁のパズルとプログラミングの日記]]
   - info [[info:emacs#org][info:emacs#org]] 

* emacs   
   - emacs の使い方は，~suzuki/progs/lects/Emacs.org, org-mode の使い
     方は, ~suzuki/progs/lects/Org.org に書いていこうと思っています。

   - emacs links
     - [[http://emacs-jp.github.io/beginner.html][Emacs for Beginners - Emacs JP]]  - info:emacs Emacs info
     - [[http://www.bookshelf.jp/texi/emacs-man/21-3/jp/emacs.html#SEC_Top][GNU Emacsマニュアル:(古いが日本語)]]

* emacs org-mode+babel

    emacs org-mode の中に，文芸的プログラミングでき機能があります。説
    明を書きながら，ソースコードも書け，実行でき，出力を文書に取り込めるも
    のです。

    Cやシェル・スクリプトがその mode で書け，コンパイルや実行を行えま
    す。例えば，下記のように:

#+BEGIN_SRC org
,#+BEGIN_SRC c :tangle ./src/exmaple.c
int main(void) {}
,#+END_SRC

,#+BEGIN_SRC sh :dir ./src
cc example.c
,#+END_SRC
#+END_SRC



* 文書の書き方，見え方などへの補足説明

*** ページ内容の折り畳みと展開

    ページ右上に [Collapse all] [Expand all] があるページは，見出し単
    位で折り畳みと展開が可能です。

*** title((cis.org s.org))

    「title((cis.org s.org)) 」という表示は，三つのリンクから成ってい
    ます。titleは, httpリンクです。cis.orgは講義環境で emacs org-mode
    で開くときに使うファイル・リンクです。s.org は鈴木の個人環境用のファ
    イル・リンクです。



